一、应用场景

    1、一个局域网内接入多台计算机，每台计算机各自运行一套功能相同的操作界面。每个操作界面对应一个peer。

    2、一个局域网内，只能有一个peer获得控制权，即令牌（token）。获得令牌的peer可以对底层设备进行操作和控制。

    3、每个peer能感知局域网内所有peer，生成一个peer列表。其中包含每个peer的一些基本信息。该列表为交换令牌提供基本数据。

    4、每个peer可以互相交换令牌。交换过程包含：主动peer提交、被动peer应答两个步骤。主动peer可以发出获取令牌请求，也可以发出让出令牌请求。
    对应的，被动peer可以做出让出令牌应答以及获取令牌应答。简单示意图如下：

        主动peer             被动peer      角色
        提交                 应答          步骤

        主动获取------------->被动让出      =完成交换
        主动让出------------->被动获取      =完成交换
        --------------------------------->时间轴

        另外要考虑：主动peer取消、被动peer取消、强制切换以及超时的特殊情况。
        主动peer和被动peer都具备取消交换过程的功能。
        强制切换为紧急情况下某个peer强制获得令牌，而不需要被动peer应答。
        令牌切换提交后，主动peer与被动peer将约定一个超时时间。时间到后，被动peer没有作出应答或取消，则切换自动取消。

    5、保证peer运行状态产生变化时，如设备宕机、网络断线、与底层设备失去联系等，自动修改令牌状态，保证：
        a.一个网络内最多只有一个令牌，即网络内可以短时间没有令牌，但是不能有两个令牌。
        b.与底层设备失去联系的peer令牌消失，且不能再获得令牌。
        c.保证无扰动切换，获得令牌的主站会广播控制状态，未获得令牌的站会自动同步跟踪（由操作面板逻辑配合完成）
        d.每个peer预先分配一个优先级。优先级最高的站，在网络上无令牌(blackout)的情况下自动产生令牌。

    6、未来考虑：
        a.动态优先级策略。比如ecc、whc、mobile三个peer，且ecc拥有最高优先级（静态），whc把令牌切至mobile，而后mobile由于某种原因断线，
        此时ecc优先生成令牌。若采用某种动态优先级策略，可以使得whc优先生成令牌（因为whc是最后一个令牌拥有者）。
        b.会有事先组态好的peer列表，peer列表由动态获取以及静态组态两个部分组成。
        c.跨网段甚至在公网使用。要做一个Server在本地内网转发。

二、功能规划

    设计一个令牌管理器类，具备以下几种功能：

    1、监听UDP端口，获取以下几种类型消息
        a.其他peer的心跳报文，用来更新peer列表。
        b.其他peer对本peer的指令报文。
        c.指令处理部分可扩展。

    2、UDP广播发数
        a.本peer心跳报文
        b.本peer对其他peer的指令报文
        c.还可扩展其他报文

    3、交换令牌的API
        a.主动获取提交、主动获取取消
        b.主动让出提交、主动让出取消
        c.被动获取应答、被动获取取消
        d.被动让出应答、被动让出取消
        e.交换成功、交换取消、交换失败（超时）的通知和处理API
        f.强制获得令牌

    4、peer列表维护
        a.更新数据
        b.超时掉线peer判断
        c.保存/读取xml

    5、异常处理
        a.令牌丢失重建
        b.扩展接口

三、协议规划

    套用NEMA0183协议，NEMA0183协议的格式数据串的所有数据都采用SASCII文本字符表示,数据传输以“$”开头,后面是语句头。语句头由五个字母组成,分两部分,
    前两个字母表示“系统ID”,即表示该语句是属于何种系统或设备,后三个字母表示“语句ID”,表示该语句是关于何方面的数据。语句头后是数据体,
    包含不同的数据体字段,语句末尾为校验码(可选),以回车换行符<CR><LF>结束,也就是ACSII字符“回车”(十六进制的0D)和“换行”(十六进制的0A)。
    每行语句最多包含82个字符(包括回车换行符和$”符号)。数据字段以逗号分隔识别,空字段保留逗号。
    以GPS的GPRMC语句为例:        $GPRMC,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>*hh<CR><LF>
    其中GP表示该语句是GPS定位系统的,RMC表示该语句输出的是GPS定位信息,后面是数据体。最后校验码*hh是用做校验的数据。在通常使用时,它并不是必须的,
    但是当周围环境中有较强的电磁干扰时,则推荐使用。hh代表了“$”和“*”的所有字符的按位异或值(不包括这两个字符)。个别厂商自己定义语句格式以“$P”开头,
    其后是3个字符的厂家ID识别号,后接自定义的数据体。

    主要区别：报文长度限制512bytes，不使用校验。协议规划如下：

    1、从站心跳报文(slave heart beat)
    $TMSHB,peer名称(max 255 byte),IP地址(4byte),peer状态(1byte),peer错误状态(1byte),peer令牌优先级(1byte)<CR><LF>

    2、主站心跳报文(master heart beat)
    $TMMHB,peer名称(max 255 byte),IP地址(4byte),peer状态(1byte),peer错误状态(1byte),peer令牌优先级(1byte),状态消息(max 255 byte)<CR><LF>
    注意：消息的具体内容由其他程序打包送入和取出解析。

    3、令牌转移提交(token transfer require)
    $TMTTR,源peer名称(持有token),目标peer名称,超时时间(秒 4byte)<CR><LF>

    4、令牌转移应答确认(token transfer acknowleadge)
    $TMTTA,源peer名称,目标peer名称<CR><LF>

    5、令牌转移取消(token transfer cancel)
    $TMTTC,源peer名称,目标peer名称<CR><LF>

    6、令牌强制转移(toekn transfer forced)//用途：1.令牌强制获得。2、令牌丢失后，自动生成令牌
    $TMTTF,目标peer名称<CR><LF>

    说明：源peer：目前获得token的peer。目标peer：将要获得令牌的peer。

四、其他逻辑设计
    1、peer信息结构体
        a.peer名称，类型QString，长度小于255bytes
        b.peer的IP地址，类型quint32
        c.peer状态，枚举
        d.peer错误状态，枚举
        e.peer令牌生产优先级，int
        f.peer上一次更新时间，QTime

    2、peer列表维护
    产生一张指针列表，[0]指代self信息，[1]指代另一方peer信息（可以是源peer或是目标peer），[2]以后为网络其他peer信息。
    注意：[0][1]中的此信息为令牌交换用，其中的peer信息在[2]以后的列表中存在重复。

    3、peer状态机
    “peer状态”是一个状态机。有八种互斥的状态：
        a、peerDisable               peer禁用
        b、peerOnlinewithToken,      peer在线有令牌，主站
        c、peerOnlinewithoutToken,   peer在线无令牌，从站
        d、tokenTakeOutPending,      该peer主动把令牌给其他peer，但其他peer未确认。该peer具有令牌，主站。
        e、tokenOrderOutPending,     其他peer要求该peer的令牌，该peer未确认。该peer具有令牌，主站。
        f、tokenTakeInPending,       该peer主动要获得令牌，但令牌持有peer未确认。该peer无令牌，从站。
        g、tokenOrderInPending,      令牌持有peer要求把令牌传送给该peer，但该peer未确认。该peer无令牌，从站。
        h、peerOffline,              peer离线。此状态不适用于self，用于判断其他peer的掉线状态。
    对于self peer，当构造函数完成后，在a状态。start()函数调用后，且网络初始化无误则在c状态，若网络初始化错误则在a状态。stop()函数调用后在a状态。
